name: build-push-release
on:
  push:
    tags:
      - '[0-9]+.[0-9]+.[0-9]+'

permissions:
  contents: write

env:
  CARGO_TERM_COLOR: always

jobs:
  check-release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: nightly
          components: rustfmt
      - name: Run cargo check tool
        run: cargo check --verbose
  create-release:
    runs-on: ubuntu-latest
    needs:
      - check-release
    outputs:
      lumos_version: ${{ env.LUMOS_VERSION }}
    steps:
      - uses: actions/checkout@v4
      - name: Extract package version from the tag
        shell: bash
        if: env.LUMOS_VERSION == ''
        run: |
          echo "LUMOS_VERSION=${{ github.ref_name }}" >> $GITHUB_ENV
      - name: Show the version
        run: |
          echo "version is: $LUMOS_VERSION"
      - name: Check that tag version and Cargo.toml version are the same
        shell: bash
        run: |
          if ! grep -q "version = \"$LUMOS_VERSION\"" Cargo.toml; then
            echo "version does not match Cargo.toml" >&2
            exit 1
          fi
      - name: Create GitHub release
        env:
          GH_TOKEN: ${{ github.token }}
        run: gh release create ${{ env.LUMOS_VERSION }} --verify-tag --title $LUMOS_VERSION
  build-release-package:
    runs-on: ${{ matrix.os }}
    needs:
      - create-release
    env:
      CARGO: cargo
      TARGET_FLAGS: ""
      TARGET_DIR: ./target
      RUST_BACKTRACE: 1
      CROSS_VERSION: v0.2.5
    strategy:
      matrix:
        build:
          - nightly-x86-gnu
          - macos
        include:
          - build: nightly-x86-gnu
            os: ubuntu-latest
            rust: nightly
            target: i686-unknown-linux-gnu
            strip: x86_64-linux-gnu-strip
          - build: macos
            os: macos-latest
            rust: nightly
            target: x86_64-apple-darwin
    steps:
      - uses: actions/checkout@v4
      - name: Install packages (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          ci/ubuntu-install-packages
      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
          target: ${{ matrix.target }}
      - name: Use cross compiler
        if: matrix.os == 'ubuntu-latest' && matrix.target != ''
        shell: bash
        run: |
          dir="$RUNNER_TEMP/cross-download"
          mkdir "$dir"
          echo "$dir" >> $GITHUB_PATH
          cd "$dir"
          curl -LO "https://github.com/cross-rs/cross/releases/download/$CROSS_VERSION/cross-x86_64-unknown-linux-musl.tar.gz"
          tar xf cross-x86_64-unknown-linux-musl.tar.gz
          echo "CARGO=cross" >> $GITHUB_ENV
      - name: Set target variables
        shell: bash
        run: |
          echo "TARGET_FLAGS=--target ${{ matrix.target }}" >> $GITHUB_ENV
          echo "TARGET_DIR=./target/${{ matrix.target }}" >> $GITHUB_ENV
      - name: Show command used for Cargo
        run: |
          echo "cargo command is: ${{ env.CARGO }}"
          echo "target flag is: ${{ env.TARGET_FLAGS }}"
          echo "target dir is: ${{ env.TARGET_DIR }}"
      - name: Build release binary and dependency crates (native)
        if: matrix.target == ''
        run: ${{ env.CARGO }} build --verbose --release ${{ env.TARGET_FLAGS }}
      - name: Build release binary and dependency crates (cross)
        if: matrix.target != 'x86_64-pc-windows-gnu'
        run: ${{ env.CARGO }} build --verbose --release ${{ env.TARGET_FLAGS }}
      - name: Strip release binary (linux, macos and macos-arm)
        if: matrix.os == 'macos'
        run: |
          strip "target/${{ matrix.target }}/release/lumos-svm"
      - name: Strip release binary (arm)
        if: matrix.build == 'linux-arm'
        run: |
          docker run --rm -v \
            "$PWD/target:/target:Z" \
            ghcr.io/cross-rs/${{ matrix.target }}:main \
            ${{ matrix.strip }} \
            /target/${{ matrix.target }}/release/lumos-svm
      - name: Build archive
        shell: bash
        run: |
          archive_target="lumos-svm-${{ needs.create-release.outputs.lumos_version }}-${{ matrix.target }}"
          mkdir -p $archive_target

          cp {README.md,LICENSE-APACHE,LICENSE-MIT,COPYING} "$archive_target/"

          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            cp "target/${{ matrix.target }}/release/lumos-svm.exe" "$archive_target/"
            7z a "$archive_target.zip" "$archive_target"
            certutil -hashfile "$archive_target.zip" SHA256 > "$archive_target.zip.sha256"
            echo "ASSET=$archive_target.zip" >> $GITHUB_ENV
            echo "ASSET_SUM=$archive_target.zip.sha256" >> $GITHUB_ENV
          else
            cp "target/${{ matrix.target }}/release/lumos-svm" "$archive_target/"

            tar czf "$archive_target.tar.gz" "$archive_target"
            shasum -a 256 "$archive_target.tar.gz" > "$archive_target.tar.gz.sha256"
            echo "ASSET=$archive_target.tar.gz" >> $GITHUB_ENV
            echo "ASSET_SUM=$archive_target.tar.gz.sha256" >> $GITHUB_ENV
          fi
      - name: Upload release archive
        env:
          GH_TOKEN: ${{ github.token }}
        shell: bash
        run: gh release upload ${{ needs.create-release.outputs.lumos_version }} ${{ env.ASSET }} ${{ env.ASSET_SUM }}
